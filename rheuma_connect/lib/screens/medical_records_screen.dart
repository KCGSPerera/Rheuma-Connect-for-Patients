import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/patient_provider.dart';
import '../models/medical_record.dart';

class MedicalRecordsScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final patientProvider =
        Provider.of<PatientProvider>(context, listen: false);
    final patientId = patientProvider.patient?.id ?? '';

    return Scaffold(
      backgroundColor: Color(0xFFDAFDF9), // Set background color to DAFDF9
      appBar: AppBar(
        title: const Text('Medical Records'),
        backgroundColor: Colors.blue, // Updated AppBar color to blue
      ),
      body: FutureBuilder<List<MedicalRecord>>(
        future: patientProvider
            .getAllMedicalRecords(patientId), // Fetch medical records
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(
              child: Text(
                'Error: ${snapshot.error}',
                style: TextStyle(color: Colors.red),
              ),
            );
          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return const Center(
              child: Text(
                'No medical records found.',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
            );
          }

          final records = snapshot.data!;
          return ListView.builder(
            itemCount: records.length,
            itemBuilder: (context, index) {
              final record = records[index];
              return Card(
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15),
                ),
                margin:
                    const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                elevation: 5,
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Icon(
                            Icons.date_range,
                            color: Colors.blue, // Updated icon color to blue
                          ),
                          SizedBox(width: 10),
                          Text(
                            'Date: ${record.date.toString().split(' ')[0]}',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: Colors.blue, // Updated text color to blue
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 10),
                      _buildInfoRow(
                          Icons.description, 'Description', record.description),
                      _buildInfoRow(
                          Icons.timelapse, 'Duration', record.duration),
                      _buildInfoRow(Icons.medication, 'Medicines',
                          record.medicines.join(", ")),
                      _buildInfoRow(Icons.person, 'Generated by',
                          'Dr. ${record.generatedBy}'),
                    ],
                  ),
                ),
              );
            },
          );
        },
      ),
    );
  }

  // Helper method to create consistent rows with icons
  Widget _buildInfoRow(IconData icon, String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 5.0),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(icon, color: Colors.blue), // Updated icon color to blue
          SizedBox(width: 10),
          Expanded(
            child: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: '$label: ',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.black,
                      fontSize: 16,
                    ),
                  ),
                  TextSpan(
                    text: value,
                    style: TextStyle(
                      color: Colors.black87,
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}
